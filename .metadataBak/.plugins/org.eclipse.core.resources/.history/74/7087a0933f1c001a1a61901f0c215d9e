import java.util.*;
import java.io.*;

public class MountainView {
	
	public static class Mountain {
		int peakX; int peakY; int left; int right;
		public Mountain(int peakX, int peakY, int left, int right) { //left and right are the x-cordinates (x-intercepts)
			this.peakX= peakX;
			this.peakY = peakY;
			this.left = left; 
			this.right = right;
		}
	}

	private static int N;
	private static int count;
	private static Mountain[] m;
	public static void main(String[] args) throws IOException{
		
		
		Scanner in = new Scanner(new FileReader(""));
		PrintWriter out = new PrintWriter(new File(""));
		
		//reading input
		N = in.nextInt();
		for (int i = 0; i < N; i++) {
			int peakX = in.nextInt();
			int peakY = in.nextInt();
			m[i] = new Mountain(peakX, peakY, peakX - peakY, peakX + peakY);
		}
		
		for (int i =0; i < N; i++) {
			if (m[i] == null) continue;
			calculatation(i);
		}
	}
	
	public static void calculatation(int index) {
		for (int i = 0; i < N; i++) {
			if (m[i] == null) continue;
			if (i == index) continue;
			Mountain comparingM = m[i];
			Mountain currentM = m[index];
			
			if (comparingM.left < currentM.left && comparingM.right > currentM.right) { //currentM's peak lies within another mountains peak
				m[index] = null;
				return;
			} else if (comparingM.left == currentM.left && comparingM.right == currentM.right) 
			else if (currentM.left < comparingM.left && currentM.right > comparingM.right) {//the comparing Mountain is getting blocked by current mountain
				m[i] = null;
			}
		}
		count++; //passes through all cases, and no mountains are blocking this mountain
			
	}

}
